// Haetaan k√§ytt√∂liittym√§n elementit
// T√§ss√§ haetaan kaikki sivulla tarvittavat HTML-elementit, joita tarvitaan kirjautumiseen, rekister√∂intiin ja k√§ytt√∂liittym√§n hallintaan.
const USERNAMEINPUT = document.getElementById("username");             // K√§ytt√§j√§tunnus-kentt√§ kirjautumislomakkeessa
const PASSWORDINPUT = document.getElementById("password");             // Salasana-kentt√§ kirjautumislomakkeessa
const LOGINBUTTON = document.getElementById("loginButton");            // Kirjautumisnappi
const FEEDBACK = document.getElementById("loginFeedback");             // Kirjautumisen palauteviesti
const VISAWRAPPER = document.querySelector(".content-wrapper");        // Varsinainen sis√§lt√∂alue, joka n√§kyy kirjautumisen j√§lkeen
const KIRJAUTUMINENDIV = document.getElementById("kirjautuminen");     // Kirjautumisn√§kym√§n div
const REKISTEROINTILOMAKE = document.getElementById("rekisterointiLomake"); // Rekister√∂intilomake
const REGISTERBUTTON = document.getElementById("registerButton");      // "Rekister√∂idy" -painike kirjautumissivulla
const REKISTEROINTILINKKI = document.getElementById("rekisterointi");  // Linkki, joka n√§ytt√§√§ rekister√∂intilomakkeen
const SUBMITREGISTER = document.getElementById("submitRegister");      // Rekister√∂intilomakkeen "L√§het√§" -painike
const REGISTERFEEDBACK = document.getElementById("registerFeedback");  // Rekister√∂innin palauteviesti
const LOGOUTBUTTON = document.getElementById("logoutButton");          // "Kirjaudu ulos" -painike, n√§kyy sis√§√§nkirjautuneena
const EDITUSERBUTTON = document.getElementById("editUserButton");      // K√§ytt√§j√§n tietojen muokkauspainike (ei viel√§ k√§yt√∂ss√§)
const YLAPAINIKKEET = document.getElementById("ylapainikkeet");        // Yl√§palkki, jossa mm. uloskirjautuminen

// Piilotetaan yl√§palkki alussa (visaWrapper piilotetaan jo CSS:ss√§)
// K√§ytt√∂liittym√§n yl√§palkki ei n√§y ennen kuin k√§ytt√§j√§ on kirjautunut sis√§√§n.
YLAPAINIKKEET.style.display = "none";

// Ev√§steiden hyv√§ksynt√§
// N√§m√§ muuttujat hallitsevat ev√§steilmoitusta. K√§ytt√§j√§n on hyv√§ksytt√§v√§ ev√§steet ennen kirjautumista tai rekister√∂itymist√§.
const COOKIEBANNER = document.getElementById("cookie-banner");         // Ev√§steilmoitusbanneri
const ACCEPTCOOKIESBTN = document.getElementById("acceptCookiesButton"); // "Hyv√§ksy ev√§steet" -painike
let COOKIESACCEPTED = false;                                           // Boolean-arvo, joka kertoo onko ev√§steet hyv√§ksytty

// Estet√§√§n kenttien k√§ytt√∂ ennen ev√§steiden hyv√§ksynt√§√§
// T√§m√§ funktio est√§√§ kaikkien kirjautumis- ja rekister√∂intikenttien k√§yt√∂n kunnes k√§ytt√§j√§ hyv√§ksyy ev√§steet.
function disableAuth() {
  USERNAMEINPUT.disabled = true;
  PASSWORDINPUT.disabled = true;
  // LOGINBUTTON j√§tet√§√§n aktiiviseksi, jotta voidaan n√§ytt√§√§ virheilmoitus painettaessa
  document.getElementById("newUsername").disabled = true;
  document.getElementById("firstName").disabled = true;
  document.getElementById("lastName").disabled = true;
  document.getElementById("email").disabled = true;
  document.getElementById("newPassword").disabled = true;
  SUBMITREGISTER.disabled = true;
}

// Sallitaan kenttien k√§ytt√∂ kun ev√§steet hyv√§ksytty
// T√§m√§ funktio tekee p√§invastoin kuin disableAuth(): se sallii lomakkeiden k√§yt√∂n.
function enableAuth() {
  USERNAMEINPUT.disabled = false;
  PASSWORDINPUT.disabled = false;
  LOGINBUTTON.disabled = false;

  document.getElementById("newUsername").disabled = false;
  document.getElementById("firstName").disabled = false;
  document.getElementById("lastName").disabled = false;
  document.getElementById("email").disabled = false;
  document.getElementById("newPassword").disabled = false;
  SUBMITREGISTER.disabled = false;
}

// Alussa ev√§steet eiv√§t ole hyv√§ksytty ‚Üí estet√§√§n k√§ytt√∂
// Jos ev√§steilmoitus n√§kyy, lomakkeet lukitaan heti sivun latautuessa.
if (COOKIEBANNER && COOKIEBANNER.style.display !== "none") {
  disableAuth();
}

// Kun k√§ytt√§j√§ hyv√§ksyy ev√§steet
// Kun k√§ytt√§j√§ painaa "Hyv√§ksy ev√§steet" -painiketta, banneri piilotetaan ja kent√§t aktivoidaan.
ACCEPTCOOKIESBTN.addEventListener("click", () => {
  COOKIESACCEPTED = true;
  COOKIEBANNER.style.display = "none";
  enableAuth();

  // Tyhjennet√§√§n vanhat virheilmoitukset, jos niit√§ oli n√§kyviss√§
  FEEDBACK.textContent = "";
  REGISTERFEEDBACK.textContent = "";
});

// Kirjautumisen tarkistus
// T√§m√§ funktio suoritetaan, kun k√§ytt√§j√§ painaa kirjautumispainiketta.
function tarkistaLogin(event) {
  event.preventDefault(); // Estet√§√§n lomakkeen oletustoiminta (sivun uudelleenlataus)

  // Estet√§√§n kirjautuminen jos ev√§steit√§ ei ole hyv√§ksytty
  if (!COOKIESACCEPTED) {
    FEEDBACK.textContent = "Hyv√§ksy ev√§steet ennen kirjautumista!";
    FEEDBACK.style.color = "red";
    return;
  }

  const username = USERNAMEINPUT.value.trim(); // Poistetaan turhat v√§lily√∂nnit k√§ytt√§j√§tunnuksesta
  const password = PASSWORDINPUT.value.trim(); // Poistetaan turhat v√§lily√∂nnit salasanasta

  // Tarkistetaan ett√§ molemmat kent√§t on t√§ytetty
  if (!username || !password) {
    FEEDBACK.textContent = "T√§yt√§ kaikki kent√§t!";
    FEEDBACK.style.color = "red";
    return;
  }

  // L√§hetet√§√§n kirjautumispyynt√∂ palvelimelle
  // L√§hett√§√§ tiedot palvelimelle JSON-muodossa ja odottaa vastausta.
 /*fetch("https://judovisa-backend.onrender.com/login", {
  method: "POST",
  headers: { "Content-Type": "application/json" },
  credentials: "include", // üîë T√§m√§ tarvitaan, koska backend sallii ev√§steet
  body: JSON.stringify({ username, password })
})*/

/*Paikallinen backend -yhteys XAMPPille*/
fetch("http://localhost:3001/login", {  // ‚Üê paikallinen backend
  method: "POST",
  headers: { "Content-Type": "application/json" },
  body: JSON.stringify({ username, password })
})

    .then(res => res.json()) // Muutetaan palvelimen vastaus JSON-muotoon
    .then(response => {
      if (response.success) {
        // Kirjautuminen onnistui ‚Üí n√§ytet√§√§n sis√§lt√∂ ja piilotetaan kirjautumislomake
        KIRJAUTUMINENDIV.style.display = "none";
        VISAWRAPPER.style.display = "flex";
        REKISTEROINTILINKKI.style.display = "none";
        YLAPAINIKKEET.style.display = "block";
        FEEDBACK.textContent = "";

        // Asetetaan fokus ensimm√§iseen kysymyskentt√§√§n (jos sellainen l√∂ytyy)
        const firstInput = document.querySelector(".kysymykset input");
        if (firstInput) firstInput.focus();
      } else {
        // Jos palvelin palauttaa virheen (esim. v√§√§r√§ tunnus/salasana)
        FEEDBACK.textContent = response.message;
        FEEDBACK.style.color = "red";
      }
    })
    .catch(err => {
      // Jos yhteys palvelimeen ep√§onnistuu
      FEEDBACK.textContent = "Virhe yhteydess√§ palvelimeen.";
      FEEDBACK.style.color = "red";
      console.error(err);
    });
}

// Liitet√§√§n tapahtuma kirjautumisnapille
// T√§m√§ yhdist√§√§ kirjautumispainikkeen klikkauksen tarkistaLogin()-funktioon.
LOGINBUTTON.addEventListener("click", tarkistaLogin);

// Rekister√∂itymisnapin toiminta
// Kun k√§ytt√§j√§ painaa "Rekister√∂idy", piilotetaan kirjautumislomake ja n√§ytet√§√§n rekister√∂intilomake.
REGISTERBUTTON.addEventListener("click", () => {
  if (!COOKIESACCEPTED) {
    FEEDBACK.textContent = "Hyv√§ksy ev√§steet ennen rekister√∂itymist√§!";
    FEEDBACK.style.color = "red";
    return;
  }

  // Tyhjennet√§√§n mahdolliset vanhat palauteviestit
  REGISTERFEEDBACK.textContent = "";

  // N√§ytet√§√§n rekister√∂intilomake ja piilotetaan kirjautumisn√§kym√§
  KIRJAUTUMINENDIV.style.display = "none";
  REKISTEROINTILOMAKE.style.display = "block";
  REKISTEROINTILINKKI.style.display = "none";

  // Asetetaan fokus ensimm√§iseen rekister√∂intikentt√§√§n
  const firstField = document.getElementById("newUsername");
  if (firstField) firstField.focus();
});

// Rekister√∂intil√§hetys
// T√§m√§ funktio suoritetaan, kun k√§ytt√§j√§ l√§hett√§√§ rekister√∂intilomakkeen.
SUBMITREGISTER.addEventListener("click", () => {
  if (!COOKIESACCEPTED) {
    REGISTERFEEDBACK.textContent = "Hyv√§ksy ev√§steet ennen rekister√∂itymist√§!";
    REGISTERFEEDBACK.style.color = "red";
    return;
  }

  // Haetaan lomakkeen tiedot ja tallennetaan ne objektiin
  const data = {
    username: document.getElementById("newUsername").value.trim(),
    firstname: document.getElementById("firstName").value.trim(),
    lastname: document.getElementById("lastName").value.trim(),
    email: document.getElementById("email").value.trim(),
    password: document.getElementById("newPassword").value.trim()
  };

  // Tarkistetaan ett√§ kaikki kent√§t on t√§ytetty ennen l√§hett√§mist√§
  if (
    !data.username ||
    !data.firstname ||
    !data.lastname ||
    !data.email ||
    !data.password
  ) {
    REGISTERFEEDBACK.textContent = "T√§yt√§ kaikki kent√§t!";
    REGISTERFEEDBACK.style.color = "red";
    return;
  }

  // L√§hetet√§√§n rekister√∂intipyynt√∂ palvelimelle
  fetch("http://localhost:3001/register", {
    method: "POST",
    headers: { "Content-Type": "application/json" },
    body: JSON.stringify(data)
  })
    .then(res => res.json()) // Muutetaan vastaus JSON-muotoon
    .then(response => {
      if (response.success) {
        // Jos rekister√∂inti onnistuu, n√§ytet√§√§n onnistumisviesti
        REGISTERFEEDBACK.textContent = "Rekister√∂inti onnistui! Siirryt√§√§n kirjautumiseen...";
        REGISTERFEEDBACK.style.color = "green";

        // Pieni viive ennen siirtymist√§ takaisin kirjautumissivulle
        setTimeout(() => {
          REKISTEROINTILOMAKE.style.display = "none";
          KIRJAUTUMINENDIV.style.display = "block";
          REKISTEROINTILINKKI.style.display = "block";

          // T√§ytet√§√§n kirjautumiskent√§t valmiiksi uusilla tiedoilla
          USERNAMEINPUT.value = data.username;
          PASSWORDINPUT.value = data.password;
          USERNAMEINPUT.focus();
        }, 1500);
      } else {
        // Jos palvelin palauttaa virheen (esim. k√§ytt√§j√§tunnus varattu)
        REGISTERFEEDBACK.textContent = response.message;
        REGISTERFEEDBACK.style.color = "red";
      }
    })
    .catch(err => {
      // Yhteysvirhe tai muu ongelma
      REGISTERFEEDBACK.textContent = "Virhe yhteydess√§ palvelimeen.";
      REGISTERFEEDBACK.style.color = "red";
      console.error(err);
    });
});

// Kirjaudu ulos
// T√§m√§ funktio palauttaa n√§kym√§n takaisin kirjautumissivulle ja piilottaa muun sis√§ll√∂n.
LOGOUTBUTTON.addEventListener("click", () => {
  VISAWRAPPER.style.display = "none";       // Piilottaa sis√§ll√∂n
  YLAPAINIKKEET.style.display = "none";     // Piilottaa yl√§palkin
  KIRJAUTUMINENDIV.style.display = "block"; // N√§ytt√§√§ kirjautumislomakkeen
  REKISTEROINTILINKKI.style.display = "block"; // N√§ytt√§√§ "Rekister√∂idy"-linkin

  // Tyhjennet√§√§n kent√§t ja palauteviestit
  USERNAMEINPUT.value = "";
  PASSWORDINPUT.value = "";
  FEEDBACK.textContent = "";
});

// Lis√§t√§√§n Enter-n√§pp√§in kirjautumiskentille
USERNAMEINPUT.addEventListener("keydown", (e) => {
  if (e.key === "Enter") LOGINBUTTON.click();
});

PASSWORDINPUT.addEventListener("keydown", (e) => {
  if (e.key === "Enter") LOGINBUTTON.click();
});

// Lis√§t√§√§n Enter-n√§pp√§in rekister√∂intikentille
document.getElementById("newUsername").addEventListener("keydown", (e) => {
  if (e.key === "Enter") SUBMITREGISTER.click();
});
document.getElementById("firstName").addEventListener("keydown", (e) => {
  if (e.key === "Enter") SUBMITREGISTER.click();
});
document.getElementById("lastName").addEventListener("keydown", (e) => {
  if (e.key === "Enter") SUBMITREGISTER.click();
});
document.getElementById("email").addEventListener("keydown", (e) => {
  if (e.key === "Enter") SUBMITREGISTER.click();
});
document.getElementById("newPassword").addEventListener("keydown", (e) => {
  if (e.key === "Enter") SUBMITREGISTER.click();
});





